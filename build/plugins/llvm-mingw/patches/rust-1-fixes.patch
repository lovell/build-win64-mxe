This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 15 Sep 2020 11:50:00 +0200
Subject: [PATCH 1/4] [WiP] Add llvm-mingw ARM/ARM64 targets


diff --git a/compiler/rustc_target/src/spec/aarch64_pc_windows_gnu.rs b/compiler/rustc_target/src/spec/aarch64_pc_windows_gnu.rs
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/compiler/rustc_target/src/spec/aarch64_pc_windows_gnu.rs
@@ -0,0 +1,32 @@
+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};
+
+pub fn target() -> TargetResult {
+    let mut base = super::windows_gnu_base::opts();
+
+    base.cpu = "generic".to_string();
+    base.pre_link_args
+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".to_string(), "arm64pe".to_string(),
+                                                       "-e".to_string(), "DllMainCRTStartup".to_string()]);
+    base.max_atomic_width = Some(64);
+    base.has_elf_tls = true;
+    base.linker = Some("ld.lld".to_string());
+
+    base.late_link_args
+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Ld))
+        .unwrap()
+        .push("-lclang_rt.builtins-aarch64".to_string());
+
+    Ok(Target {
+        llvm_target: "aarch64-pc-windows-gnu".to_string(),
+        target_endian: "little".to_string(),
+        target_pointer_width: "64".to_string(),
+        target_c_int_width: "32".to_string(),
+        data_layout: "e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128".to_string(),
+        arch: "aarch64".to_string(),
+        target_os: "windows".to_string(),
+        target_env: "gnu".to_string(),
+        target_vendor: "pc".to_string(),
+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),
+        options: base,
+    })
+}
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index 1111111..2222222 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -609,10 +609,12 @@ supported_targets! {
 
     ("x86_64-unknown-illumos", x86_64_unknown_illumos),
 
+    ("aarch64-pc-windows-gnu", aarch64_pc_windows_gnu),
     ("x86_64-pc-windows-gnu", x86_64_pc_windows_gnu),
     ("i686-pc-windows-gnu", i686_pc_windows_gnu),
     ("i686-uwp-windows-gnu", i686_uwp_windows_gnu),
     ("x86_64-uwp-windows-gnu", x86_64_uwp_windows_gnu),
+    ("thumbv7a-pc-windows-gnu", thumbv7a_pc_windows_gnu),
 
     ("aarch64-pc-windows-msvc", aarch64_pc_windows_msvc),
     ("aarch64-uwp-windows-msvc", aarch64_uwp_windows_msvc),
diff --git a/compiler/rustc_target/src/spec/thumbv7a_pc_windows_gnu.rs b/compiler/rustc_target/src/spec/thumbv7a_pc_windows_gnu.rs
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/compiler/rustc_target/src/spec/thumbv7a_pc_windows_gnu.rs
@@ -0,0 +1,36 @@
+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetResult};
+
+pub fn target() -> TargetResult {
+    let mut base = super::windows_gnu_base::opts();
+
+    base.cpu = "generic".to_string();
+    base.pre_link_args
+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".to_string(), "thumb2pe".to_string(),
+                                                       "-e".to_string(), "DllMainCRTStartup".to_string()]);
+    base.max_atomic_width = Some(64);
+    base.eliminate_frame_pointer = false; // Required for backtraces
+    base.linker = Some("ld.lld".to_string());
+
+    // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is
+    // implemented for windows/arm in LLVM
+    base.panic_strategy = PanicStrategy::Abort;
+
+    base.late_link_args
+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Ld))
+        .unwrap()
+        .push("-lclang_rt.builtins-arm".to_string());
+
+    Ok(Target {
+        llvm_target: "thumbv7a-pc-windows-gnu".to_string(),
+        target_endian: "little".to_string(),
+        target_pointer_width: "32".to_string(),
+        target_c_int_width: "32".to_string(),
+        data_layout: "e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".to_string(),
+        arch: "arm".to_string(),
+        target_os: "windows".to_string(),
+        target_env: "gnu".to_string(),
+        target_vendor: "pc".to_string(),
+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),
+        options: base,
+    })
+}

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 15 Sep 2020 15:20:00 +0200
Subject: [PATCH 2/4] Prefer linking against UCRT over MSVCRT

When our linker is LLD (i.e. building with llvm-mingw).

Also avoid linking against libgcc, libgcc_eh and libgcc_s.

diff --git a/compiler/rustc_target/src/spec/windows_gnu_base.rs b/compiler/rustc_target/src/spec/windows_gnu_base.rs
index 1111111..2222222 100644
--- a/compiler/rustc_target/src/spec/windows_gnu_base.rs
+++ b/compiler/rustc_target/src/spec/windows_gnu_base.rs
@@ -19,7 +19,7 @@ pub fn opts() -> TargetOptions {
     let mut late_link_args_static = LinkArgs::new();
     // Order of `late_link_args*` was found through trial and error to work with various
     // mingw-w64 versions (not tested on the CI). It's expected to change from time to time.
-    let mingw_libs = vec![
+    let mingw_libs_gcc = vec![
         "-lmsvcrt".to_string(),
         "-lmingwex".to_string(),
         "-lmingw32".to_string(),
@@ -34,8 +34,16 @@ pub fn opts() -> TargetOptions {
         "-luser32".to_string(),
         "-lkernel32".to_string(),
     ];
-    late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());
-    late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);
+    late_link_args.insert(LinkerFlavor::Gcc, mingw_libs_gcc);
+    let mingw_libs_llvm = vec![
+        "-lucrt".to_string(),
+        "-lmingwex".to_string(),
+        "-lmingw32".to_string(),
+        "-luser32".to_string(),
+        "-lkernel32".to_string(),
+        "-lunwind".to_string(),
+    ];
+    late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs_llvm);
     let dynamic_unwind_libs = vec![
         // If any of our crates are dynamically linked then we need to use
         // the shared libgcc_s-dw2-1.dll. This is required to support
@@ -44,8 +52,7 @@ pub fn opts() -> TargetOptions {
         "-lgcc".to_string(),
         "-lkernel32".to_string(),
     ];
-    late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs.clone());
-    late_link_args_dynamic.insert(LinkerFlavor::Lld(LldFlavor::Ld), dynamic_unwind_libs);
+    late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs);
     let static_unwind_libs = vec![
         // If all of our crates are statically linked then we can get away
         // with statically linking the libgcc unwinding code. This allows
@@ -59,8 +66,7 @@ pub fn opts() -> TargetOptions {
         "-lmsvcrt".to_string(),
         "-lkernel32".to_string(),
     ];
-    late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs.clone());
-    late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);
+    late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs);
 
     TargetOptions {
         // FIXME(#13846) this should be enabled for windows

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 16 Sep 2020 09:30:00 +0200
Subject: [PATCH 3/4] Make Windows GNU targets compatible with llvm-mingw


diff --git a/compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs b/compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs
index 1111111..2222222 100644
--- a/compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs
+++ b/compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs
@@ -4,7 +4,8 @@ pub fn target() -> TargetResult {
     let mut base = super::windows_gnu_base::opts();
     base.cpu = "pentium4".to_string();
     base.pre_link_args
-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".to_string(), "i386pe".to_string()]);
+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".to_string(), "i386pe".to_string(),
+                                                       "-e".to_string(), "_DllMainCRTStartup".to_string()]);
     base.max_atomic_width = Some(64);
     base.eliminate_frame_pointer = false; // Required for backtraces
     base.linker = Some("i686-w64-mingw32-gcc".to_string());
@@ -16,6 +17,11 @@ pub fn target() -> TargetResult {
         .unwrap()
         .push("-Wl,--large-address-aware".to_string());
 
+    base.late_link_args
+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Ld))
+        .unwrap()
+        .push("-lclang_rt.builtins-i386".to_string());
+
     Ok(Target {
         llvm_target: "i686-pc-windows-gnu".to_string(),
         target_endian: "little".to_string(),
diff --git a/compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs b/compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs
index 1111111..2222222 100644
--- a/compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs
+++ b/compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs
@@ -5,10 +5,16 @@ pub fn target() -> TargetResult {
     base.cpu = "x86-64".to_string();
     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push("-m64".to_string());
     base.pre_link_args
-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".to_string(), "i386pep".to_string()]);
+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["-m".to_string(), "i386pep".to_string(),
+                                                       "-e".to_string(), "DllMainCRTStartup".to_string()]);
     base.max_atomic_width = Some(64);
     base.linker = Some("x86_64-w64-mingw32-gcc".to_string());
 
+    base.late_link_args
+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Ld))
+        .unwrap()
+        .push("-lclang_rt.builtins-x86_64".to_string());
+
     Ok(Target {
         llvm_target: "x86_64-pc-windows-gnu".to_string(),
         target_endian: "little".to_string(),

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 18 Sep 2020 21:00:00 +0200
Subject: [PATCH 4/4] Do not distribute Windows-specific files while
 cross-compiling

These files (gcc.exe, ld.exe, dlltool.exe, etc.) are not available on
Unix systems with MinGW and probably exists only on MSYS environments.

Note: this patch has only been tested on Linux.

diff --git a/src/bootstrap/dist.rs b/src/bootstrap/dist.rs
index 1111111..2222222 100644
--- a/src/bootstrap/dist.rs
+++ b/src/bootstrap/dist.rs
@@ -365,7 +365,7 @@ impl Step for Mingw {
     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {
         let host = self.host;
 
-        if !host.contains("pc-windows-gnu") {
+        if !host.contains("pc-windows-gnu") || builder.config.build != host {
             return None;
         }
